@startuml FROST

class DataProvider {
    {static} getObservationStations(middle: Position, radius : number) : ObservationStation[]
}

note as N1
    Fassade, nur diese Klasse ist nach auÃŸen sichtbar.
end note

DataProvider .. N1

DataProvider --> FrostFactory
DataProvider --> FrostServer

abstract QueryBuilder {
     getQuery(obj : any) : string
}

FrostFactory --> ResultModelConverter

package GetObservationStation {
    class GetObservationStationsBuilder implements QueryBuilder {
        getQuery(options: GetObservationStationsOptions) : string
    }

    class GetObservationStationFactory implements FrostFactory{
        GetQueryBuilder() : GetObservationStationsBuilder
        GetConverter() : GetObservationStationsConverter
    }

    GetObservationStationsBuilder --> GetObservationStationsOptions
    GetObservationStationFactory --> GetObservationStationsBuilder
    GetObservationStationFactory --> GetObservationStationsConverter

    interface GetObservationStationsOptions {
        middle : Position
        radius : number
    }
    
    class GetObservationStationsConverter<ObservationStation[]> implements ResultModelConverter {
        convert(json : string) : FrostResult<ObservationStation[]>
    }
}


abstract ResultModelConverter<T> {
    convert(json : string): T
}


abstract FrostFactory {
    GetConverter() : ResultModelConverter<T>
    GetQueryBuilder() : QueryBuilder
}



FrostFactory --> QueryBuilder
FrostFactory --> FrostResult

class FrostResult<T> {
    constructor(res : T, success : boolean, err? : string)
    result : T
    success : boolean
    errorMessage : string
}

class FrostServer {
    getUrl() : string
    setUrl(url : string)

    request(ff : FrostFactory, options : any) : FrostResult
}
note as N2
request(new GetObservationStationsFactory(), options : GetObservationStationsOptions) {
    var query = ff.getQueryBuilder().getQuery(options)
    var json = this.send(query)
    var obs = ff.getConverter().convert(json)
    return obs
    }
end note
FrostServer .. N2

@enduml