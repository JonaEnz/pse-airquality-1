@startuml Controller

namespace Controller {
    namespace Frost {
        class DataProvider {
            + {static} getObservationStations(middle: Position, radius : number) : ObservationStation[]
            + {static} getLatestObservation(station : ObservationStation, feature : Feature) : Observation
            + {static} getObservations(station : ObservationStation, start : Date, end : Date, 
              {static}  feature : Feature, freuqency? : Frequency) : Observation[]
            + {static} getObservationStations(middle : Position, radius : number) : ObservationStation[]
            + {static} getStation(id : string) : ObservationStation
        }

        note as N1
            Fassade, nur diese Klasse ist nach außen sichtbar.
        end note

        DataProvider .. N1

        DataProvider --> FrostFactory
        DataProvider --> FrostServer

        abstract QueryBuilder {
            getQuery(options : any) : string
        }

        FrostFactory --> ResultModelConverter

        namespace GetObservationStation {
            class GetObservationStationsBuilder implements Controller.Frost.QueryBuilder {
                getQuery(options: GetObservationStationsOptions) : string
            }

            class GetObservationStationFactory implements Controller.Frost.FrostFactory{
                GetQueryBuilder() : GetObservationStationsBuilder
                GetConverter() : GetObservationStationsConverter
            }

            GetObservationStationsBuilder --> GetObservationStationsOptions
            GetObservationStationFactory --> GetObservationStationsBuilder
            GetObservationStationFactory --> GetObservationStationsConverter

            interface GetObservationStationsOptions {
                middle : Position
                radius : number
            }
            
            class GetObservationStationsConverter<ObservationStation[]> implements Controller.Frost.ResultModelConverter {
                convert(json : string) : FrostResult<ObservationStation[]>
            }

            note as N3
            GetObservationStation ist beispielhaft für alle Factorys
            die für die Übersicht weggelassen wurden.
            end note

            GetObservationStationFactory .. N3
        }


        abstract ResultModelConverter<T> {
            convert(json : string): FrostResult<T>
        }


        abstract FrostFactory {
            GetConverter() : ResultModelConverter<T>
            GetQueryBuilder() : QueryBuilder
        }



        FrostFactory --> QueryBuilder

        class FrostServer {
            getUrl() : string
            setUrl(url : string)

            request(ff : FrostFactory, options : any) : FrostResult
            <<async>> asyncRequest(ff : FrostFactory, options : any) : Promise<FrostResult>
        }
        note as N2
        request(new GetObservationStationsFactory(), options : GetObservationStationsOptions) {
            var query = ff.getQueryBuilder().getQuery(options)
            var json = this.send(query)
            var obs = ff.getConverter().convert(json)
            return obs
            }
        end note
        FrostServer .. N2
    }
    namespace Storage {
        class Language {
            {static} + getText(id: string) : string
            {static} + changeLanguage(languageId : string): void
            {static} + getSelectedLanguageId() : string
        }

        class MapConfigurationMemory {
            + save(MapConfiguration conf, viewport : Viewport)
            + load() : (MapConfiguration, Viewport)
        }
    }

    MapController --> Controller.Storage.MapConfigurationMemory

    class MapController {
        + handlePopup(pin : MapPin) : [Station, Observation]
        + handleViewportChange(viewport : Viewport)
        --
        + getPins() : MapPin[]
        + getPolygons() : Polygon[]

        + changeFeature(feature : Feature) : void
        + onConfigurationChange(mapConf : MapConfiguration) : void
        + search(searchTerm : string) : void
        + updateCurrentPosition(position : Position) : void
    }

    abstract MapConfiguration {
        + getPins(port : Viewport) : MapPin[]
        + getPolygons(port: Viewport) : Polygon[]
        + getScale() : Scale
        + getFeatures() : Feature[]
    }

    class StationConfiguration extends MapConfiguration {
        + setFeature(feature : Feature)
    }

    class PolygonConfiguration extends MapConfiguration {
        + setFeature(feature : Feature)
    }

    class NearConfiguration extends MapConfiguration {
        + radius : number
        --
        + setFeature(feature : Feature)
    }

}

@enduml