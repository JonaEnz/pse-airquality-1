@startuml MVC

namespace Model {

    class MapPin {
        <<constructor>> MapPin(position : Position)

        + getPosition() : Position
        + setPosition(position : Position) : void

        + getValue() : float
        + setValue(value : float) : void

        + getStationId() : string
        + setStationId(id : string) : void

        + getColor() : Color
        + setColor(color : Color) : void
    }

    class Viewport {
        + getCenter() : Position
        + setCenter(position : Position) : void

        + getZoom() : int
        + setZoom(zoom : int) : void

        + getRadius() : int
    }
    
    class ObservationStation {
        -id : int
        -name : String
        - description : String
        -position : Position
        -availableFeatures : List<Feature>

        + getId : int
        + getName() : string
        + getDescription() : String
        + getFeatures() : List<Feature>
        + getPosition() : Position
        + isLimitExceeded(feature : Feature) : Boolean
        + hasFeature(feature : Feature) : Boolean
        + getDiagrams() : DetailPage.Diagram[]
    }
   
    class Observation {
        observationStation : ObservationStation
        feature : Feature
        dateTime : Date
        value : float

        + getValue() : float
        + getObservationStation() : ObservationStation
        + getFeature() : Feature
        + getDateTime : Date
    }

    enum Timespan {
            LAST_YEAR,
            LAST_3_MONTHS,
            LAST_MONTH,
            LAST_WEEK,
            LAST_3_DAYS,
            TODAY,
        }
    
    class Position {
        xCoordinate : float
        yCoordinate : float
    }

    class Feature {
        - id : int
        - name : String
        - description : String
        - scale : Scale
        - fallbackScale : Scale
        - relatedWeblink : String
        - drawableDiagrams : DetailPage.Diagram[]
        - limit : float
        {static} + getFeature(featureID : int) : Feature
        {static} + getFeature(featureName : String) : Feature
        {static} + getRegisteredFeatures() : Feature[]
        + getID() : int
        + getName() : String
        + getDescription() : String
        + getRelatedScale() : Scale
        + getRelatedWeblink() : String
        + getDrawableDiagrams() : DetailPage.Diagram[]
        + getLimit : float
    }

    enum Colors {
        GREEN = "#50EE70"
        LIGHTGREEN = "#AAFF55"
        YELLOW = "#FFFF00"
        ORANGE = "#FFA500"
        RED = "#FF0000" 
    }

    class Color {
        + getRGB() : string
        + setRGB(hex : string) : void
    }

    class ColorCode {
        color : Colors
        + getColor(value : float)
    }

    class Scale {
        -colors : Colors[]
        +listAllColors() : Colors
        + getColor(value : float) : Color
    }

}

namespace View {
    namespace Components {
        namespace MapPage {
            class FeatureSelect {
                + getSelectedFeature() : Feature
                + setFeature(feature : Feature)
            }
            class Search {
                + State.searchTerm : string
                + onSearch(string searchTerm) : void
                + onLocationSearch() : void
                + reset() : void
            }

            class MapView {
            + selectStation(station : Messstation)
            + getValueAt(position: Position, feature : Feature) : number
            + onViewportChange(viewport : Viewport)
            + onStationSelected(pin : MapPin)
        }
            class Map {
                + Props.pins : MapPin[]
                + Props.polygons : Polygon[]
                + Props.onViewportChange()
            }
            class Legend {
                + Pros.scale : Scale
            }
        }
        namespace DetailPage {
            class ObservationStationInfo
            class LocationMap
            abstract Diagram {
                - feature : Feature
            }
            class FeatureHistoryLineChart extends Diagram
            class YearComparisonLineChart extends Diagram
            class ComparisonToLastYearPieChart extends Diagram
        }
    }

    namespace Layout {
        class MapPage
        class DetailPage
        class ErrorPage {
            + errorCode : int
            + errorMessage : string
        }
        class PrivacyPolicyPage
        class AboutPage
        class PageMenu
        class LanguageMenu
        class TopBar
    }
}


namespace Controller {
    namespace Frost {
        class FROSTServer {
            + setUrl(url : string) : void
            + getUrl() : string
        }

        class FROSTQuery {
            + send() : QueryResult
            + setTop(n : int) : void           
            + setSkip(n : int) : void
            + enableCount(set : boolean) : void
            + setOrderBy(orderBy : string) : void
            + setSelect(select : string) : void
            + setFilter(filter : string) : void
            + setExpand(expand : string) : void
            + setId(id : string) : void
        }

        interface QueryResult
        class DataProvider {
            + getLatestObservations(center : Position, radius: int, feature : Feature) : Observation[]
            + getLatestObservation(station : ObservationStation, feature : Feature) : Observation
            + getStationsIn(middle: Position, radius : int) : Station[]
            + getHistoricalObservations(station : Station, start : Date, end : Date, feature : Feature) : Observation[]
            + getHistoricalObservations(station : Station, start : Date, end : Date, frequency : Frequency, feature : Feature) : Observation[]
            + getStation(id : string) : Station
            + getFeature(id : string) : Feature
        }
        class FeatureProvider {
            makeFeature(id : string) : Feature
            getScale(feature : Feature) : Scale
        }
    }
    namespace Storage {
        class Language {
            + getString(id: string) : string
            + loadLanguage(languageId : string)
        }

        class MapConfigurationMemory {
            + save(MapConfiguration conf, viewport : Viewport)
            + load() : (MapConfiguration, Viewport)
        }
    }

    class MapController {
        + handlePopup(pin : MapPin) : (Station, Observation)
        + handleViewportChange(viewport : Viewport)
        --
        + getPins() : MapPin[]
        + getPolygons() : Polygon[]

        + changeFeature(feature : Feature) : void
        + onConfigurationChange(mapConf : MapConfiguration) : void
        + search(searchTerm : string) : void
        + updateCurrentPosition() : void
    }

    abstract MapConfiguration {
        + getPins(port : Viewport) : MapPin[]
        + getPolygons(port: Viewport) : Polygon[]
        + getScale() : Scale
        + getFeatures() : Feature[]
    }

    class StationConfiguration extends MapConfiguration {
        + setFeature(feature : Feature)
    }

    class PolygonConfiguration extends MapConfiguration {
        + setFeature(feature : Feature)
    }

    class NearConfiguration extends MapConfiguration {
        + radius : int
        --
        + setFeature(feature : Feature)
    }

    class DetailController {
        
    }


}

@enduml