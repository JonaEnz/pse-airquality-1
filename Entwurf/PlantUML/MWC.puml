@startuml Komplett


namespace FROST {
    
    FROSTQuery --> FROSTServer
    FROSTQuery --> QueryResult


    class FROSTServer {
        + setUrl(url : string) : void
        + getUrl() : string
    }
    abstract FROSTQuery {
        + send() : QueryResult
        + setTop(n : int) : void           
        + setSkip(n : int) : void
        + enableCount(set : boolean) : void
        + setOrderBy(orderBy : string) : void
        + setSelect(select : string) : void
        + setFilter(filter : string) : void
        + setExpand(expand : string) : void
        + setId(id : string) : void
    }
    class ObservationQuery extends FROSTQuery
    class DatastreamQuery extends FROSTQuery
    class ObservedPropertyQuery extends FROSTQuery
    class ThingQuery extends FROSTQuery 
    class LocationQuery   

    interface QueryResult

    note top of DataProvider : This is a facade class. All requests for data run through this class.\nThe underlying mechanism of the request is hidden. \nOnly model data is given to the outside.
    class DataProvider {
        + getLatestObservations(center : Position, radius: int, feature : Feature) : Observation[]
        + getStationsIn(middle: Position, radius : int) : Station[]
        + getHistoricalObservations(station : Station, start : Date, end : Date, feature : Feature) : Observation[]
        + getHistoricalObservations(station : Station, start : Date, end : Date, frequency : Frequency, feature : Feature) : Observation[]
        + getStation(id : string) : Station
        + getFeature(id : string) : Feature
    }

    class FeatureProvider {
        makeFeature(id : string) : Feature
        - getScale(feature : Feature) : Scale
    }

    class Cache {
        getStation(stationId : string) : Station
        getHistoricalObservations(station : Station, start : Date, end : Date, frequency : Frequency, feature : Feature) : Observation[]
        getLatestObservations(stationId : string) : Observation
        getFeature(featureid : string) : Feature
    }
} 


namespace Model {
    class ObservationStation {
        -id : int
        -name : String
        -position : Position
        -availableFeatures : List<Feature>

        + getId : int
        + getName() : string
        + getFeatures() : List<Feature>
        + getPosition() : Position
        + isLimitExceeded(feature : Feature) : Boolean
        + hasFeature(feature : Feature) : Boolean
        + getDiagrams() : DetailPage.Diagram[]
    }
    ObservationStation --> Position
    ObservationStation "1" --> "*" Feature
   
    class Observation {
        observationStation : ObservationStation
        feature : Feature
        dateTime : Date
        value : float

        + getValue() : float
        + getObservationStation() : ObservationStation
        + getFeature() : Feature
        + getDateTime : Date
    }
    Observation --> Position
    Observation  --> ObservationStation
    Observation --> Feature

    enum Timespan {
            LAST_YEAR,
            LAST_3_MONTHS,
            LAST_MONTH,
            LAST_WEEK,
            LAST_3_DAYS,
            TODAY,
        }
    
    class Position {
        xCoordinate : float
        yCoordinate : float
    }

    note top of Feature : Designed as a modified Singleton. There is only \n one object of each feature (Temperature, Air Pressure, ...).\n There is a config file which says which different types of \nfeatures exist.
    class Feature {
        - id : int
        - name : String
        - description : String
        - scale : Scale
        - fallbackScale : Scale
        - relatedWeblink : String
        - drawableDiagrams : DetailPage.Diagram[]
        - limit : float
        {static} + getFeature(featureID : int) : Feature
        {static} + getFeature(featureName : String) : Feature
        {static} + getRegisteredFeatures() : Feature[]
        + getID() : int
        + getName() : String
        + getDescription() : String
        + getRelatedScale() : Scale
        + getRelatedWeblink() : String
        + getDrawableDiagrams() : DetailPage.Diagram[]
        + getLimit : float
    }
    Feature "1" --> "1" Scale
    Feature --> DetailPage.Diagram

    enum Colors {
        GREEN = "#50EE70"
        LIGHTGREEN = "#AAFF55"
        YELLOW = "#FFFF00"
        ORANGE = "#FFA500"
        RED = "#FF0000" 
    }
    Colors *-- ColorCode
    Colors *-- Scale
    ColorCode -- Scale

    class Color {
        + getRGB() : string
        + setRGB(hex : string) : void
    }

    class ColorCode {
        color : Colors
        + getColor(value : float)
    }

    class Scale {
        -colors : Colors[]
        +listAllColors() : Colors
        + getColor(value : float) : Color
    }
}

MapPage +-- Model

namespace View {
    namespace DetailPage {
    class DetailPage extends Layout.Page
    DetailPage "1" --> "1" Model.ObservationStation
    DetailPage "1" --> "1" FROST.DataProvider
    DetailPage "1" --o "1" ObservationStationInfo
    DetailPage "1" --o "1" LocationMap
    DetailPage "1" --o "*" Diagram
    DetailPage "1" --o "1" MaterialUI.Button
        note top of DetailPage.DetailPage : This class manages the page build process. Based on which features the respective observation \nstation provides, the page is built differently. There is a configuration file which says which \ndiagrams must be drawn for which features. Accordingly the page is built.

    class ObservationStationInfo extends React.Component
    ObservationStationInfo "1" --> "1" Model.ObservationStation
    ObservationStationInfo "1" --> "1" FROST.DataProvider
    ObservationStationInfo "1" --> "*" Model.Observation

    class LocationMap extends React.Component
    LocationMap "1" --> "1" Model.Position

    note top of Diagram : Must be initialized with a Feature. The observationStation can be set afterwards, as\n well as the data of the diagram can be loaded. When all the necessary data is loaded, \nthe diagram can be drawn and becomes visable in the userinterface.\n This allowes asynchronous page loading from outside of this class.
    abstract Diagram extends React.Component {
        - feature : Model.Feature
        + draw() : void
        + setObservationStation(observationStation : Model.ObservationStation) : void
        + loadData() : void
        + isDataLoaded() : Boolean
    }
    Diagram "1" --> "1" FROST.DataProvider
    Diagram "1" --> "*" Model.Observation
    Diagram "1" --o "1" ReactGoogleCharts.Chart
    Diagram "1" --o "1" MaterialUI.Progress

    class FeatureHistoryLineChart extends Diagram
    FeatureHistoryLineChart "1" --> "1" MaterialUI.Select

    class YearComparisonLineChart extends Diagram
    class ComparisonToLastYearPieChart extends Diagram

    namespace ReactGoogleCharts {
    class Chart extends React.Component
    }
}

namespace Controller {
    
}


Layout +-- MapPage
MapPage +-- MaterialUI

namespace Layout {
    abstract Page
    class ErrorPage extends React.Component {
        + errorCode : int
        + errorMessage : string
    }
    class PrivacyPolicyPage extends React.Component
    class AboutPage extends React.Component

    class PageMenu
    class Ladeanzeige

    class LanguageMenu extends React.Component {
        + setLanguage(id : string)
    }
    LanguageMenu --> Storage.Language

    class TopBar
}

namespace Storage {
    class Language {
        + getString(id: string) : string
        + loadLanguage(languageId : string)
    }

    class MapConfigurationMemory {
        + save(MapConfiguration conf, viewport : Viewport)
        + load() : (MapConfiguration, Viewport)
    }
}


namespace MaterialUI {
    class PopUp
    class Button
}

}
namespace MapPage {

    namespace Components {
        class MapView extends React.Component {
            + loading : boolean
            + selectedFeature : Feature
            --
            + selectStation(station : Messstation)
            + getValueAt(position: Position, feature : Feature) : float
            + openPopUp(station : ObservationStation)
            + closePopUp() : void
        }

        class FeatureSelect extends React.Component {
            + getSelectedFeature() : Feature
            + setFeature(feature : Feature)
        }

        class Search extends React.Component {
            + searchTerm : string
            --
            + find() : Position
            + findCurrentPosition() : Position
            + reset() : void
        }

        class Map extends React.Component {
            + viewport : Viewport
            --
            + setPosition(position : Position)
            + setZoom(zoom : int)
        }

        class Legend extends React.Component{
            + scale : Scale
        }

        class StationInfo extends React.Component {
            + openDetails : MaterialUI.Button
            + station : Messstation
            + isOpen : boolean
        }
    }

    Map --> Viewport
    MapView --> StationInfo
    Map --> MapPin
    Map --> Polygon
    MapView --> Search
    MapView --> Map
    MapView --> Legend
    MapView --> FeatureSelect

    

    class Viewport {
        + getCenter() : Position
        + setCenter(position : Position) : void

        + getZoom() : int
        + setZoom(zoom : int) : void

        + getRadius() : int
    }
    

    MapView -- "1" MapConfiguration
    MapConfiguration --> MapPin
    MapConfiguration --> Polygon

    abstract MapConfiguration {
        + getPins(port : Viewport) : MapPin[]
        + getPolygons(port: Viewport) : Polygon[]
        + getScale() : Scale
        + getFeatures() : Feature[]
    }

    class StationConfiguration extends MapConfiguration {
        + setFeature(feature : Feature)
    }

    class PolygonConfiguration extends MapConfiguration {
        + setFeature(feature : Feature)
    }

    class NearConfiguration extends MapConfiguration {
        + radius : int
        --
        + setFeature(feature : Feature)
    }

    class MapPin {
        + getPosition() : Position
        + setPosition(position : Position) : void

        + getValue() : float
        + setValue(value : float) : void

        + getStationId() : string
        + setStationId(id : string) : void

        + getColor() : Color
        + setColor(color : Color) : void
    }

    class Polygon {
        + stations : ObservationStation[]
    }
}


@enduml
