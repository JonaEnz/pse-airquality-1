@startuml Komplett


package FROST {
    
    FROSTQuery --> FROSTServer
    FROSTQuery --> QueryResult


    class FROSTServer
    abstract FROSTQuery {
        send() : QueryResult
    }
    class ObservationQuery extends FROSTQuery
    class DatastreamQuery extends FROSTQuery
    class ObservedPropertyQuery extends FROSTQuery
    class ThingQuery extends FROSTQuery

    abstract QueryResult
    

    class ObservationResult extends QueryResult
    class DatastreamResult extends QueryResult
    class ObservedPropertyResult extends QueryResult
    class ThingResult extends QueryResult
} 


package Modell {
    class Measuringstation {
        -name : String
        -position : Position
        -availableFeatures : List<Feature>
        + getName() : string
        + getFeatures() : List<Feature>
        + getCurrentValue() : int
        + getPosition() : Position
        + getCurrentValue() : float
        + getAvarage() : float
        + getAllData(Date date, Date date) : List<float>
        + isLimitExceeded() : Boolean
    }
    
     class Date  {
        day : Integer
        month : Integer
        year : Integer
        hour : float
    }
    
    class Position {
        xCoordinate : float
        yCoordinate : float
    }

    abstract class Feature {
    + getFeatureInfo() : FeatureInfo
    } 


    class Feinstaub extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
    class Luftfeuchtigkeit extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
    class Luftdruck extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
    class Temperatur extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
   
    enum Colors {
        GREEN
        LIGHTGREEN
        YELLOW
        ORANGE
        RED
    }

    Colors *-- ColorCode
    Colors *-- Skala
    ColorCode -- Skala

    class ColorCode {
        color : Colors
        + getColor(value : float)
    }

    class Skala {
        -colors : Colors[]
        +listAllColors() : Colors
    }
    
    class FeatureInfo {
        -info : String
        + getInfo() : String
    }
}

Kartenseite +-- Modell

package Kartenseite {

    package Components {
        class Kartenansicht extends React.Component {
        + goToPosition(position : Position) : void
        + setZoom(zoom : int)
        + selectFeature(id : string)
        + openPopUp(pin : MapPin)

        + addPin(pin: MapPin)
        + removePin(pin: MapPin)
        }

        class FeatureSelect extends React.Component {
            + getSelectedFeature() : Feature
            + setFeature(feature : Feature)
        }

        class Search extends React.Component {
            + find(string searchTerm) : Position
            + findCurrentPosition() : Position
            + reset() : void
        }

        class Karte extends React.Component {
        + stationen : ArrayList<Messstation>
        --
        + selectStation(station : Messstation)
        + setPosition(position : Position)
        + getValueAt(position: Position, feature : Feature) : float
        }
    }

    Kartenansicht --> Viewport
    Kartenansicht --> Position
    Karte --> Search
    Kartenansicht -- Karte
    Karte -- Legend

    

    class Viewport {
        + getCenter() : Position
        + setCenter(position : Position)

        + getZoom() : int
        + setZoom(zoom : int)
    }

    class Position {
        + getCoordinates() : string
        + setCoordinates() : string

        + toString() : string 
    }
    

    Kartenansicht -- Kartenkonfiguration
    Kartenkonfiguration "1" -- "*" MapPin
    Kartenansicht --> "*" MapPin
    Kartenansicht --> "*" Polygon

    abstract Kartenkonfiguration {
        + getPins(port : Viewport) : MapPin[]
    }

    class testMapConfig extends Kartenkonfiguration {
        + getScale() : Skala
    }

    class MapPin {
        + getPosition() : Position
        + setPosition(position : Position)

        + getValue() : float
        + setValue(value : float)

        + getStationId() : string
        + setStationId(id : string)

        + getColor() : Color
        + setColor(color : Color)
    }

    class Legend extends React.Component{
        + setScale(scale : Skala)
        + loadScale(feature : Feature)
    }

    class Polygon {
        + messstationen : ArrayList<Messstation>
        --
        + getAvgValue() : float
    }
}

package Detailansicht {
    abstract Diagram
    class Graph extends Diagram
    class PieChart extends Diagram
    class HistorischeVeränderung extends Graph
    class Jahresvergleich extends Graph
    class HeutevsLetztesJahr extends PieChart
    class StaticMap
    class DiagramConfiguration
    class Messwertübersicht
    class Grenzwertwarnung extends PopUp
}

Layout +-- Kartenseite

package Layout {
    abstract Seite
    class Fehlerseite extends Seite
    class Datenschutzerklärung extends Seite
    class Impressum extends Seite
    class Ladeanzeige extends Seite
    class Kartenansicht extends Seite
    class Detailansicht extends Seite
    class Positionsanzeige
    class Seitenmenü

    Sprachauswahl --> Store.Sprache
    class Sprachauswahl extends React.Component {
        + setLanguage(id : string)
    }
    class Kopfleiste
}

package Store {
    class Sprache {
        + getString(id: string) : string
        + loadLanguage(file : string)
    }

    class KartenkonfigurationSpeicher {
        + save(Kartenkonfiguration conf, viewport : Viewport)
        + load() : Kartenkonfiguration
    }
}


package UserInterface {
    class PopUp extends React.Component {
    + open() :void
    + close() :void
    }
    abstract Button
    class HamburgerMenu
    class Indexbutton    
    class InfoPopup extends PopUp {
        
    }
    class Infotext
    class Skala {
        färbung : Färbung
    }
    
}


@enduml
