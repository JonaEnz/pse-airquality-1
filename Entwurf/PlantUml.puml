@startuml Komplett


package FROST {
    
    FROSTQuery --> FROSTServer
    FROSTQuery --> QueryResult


    class FROSTServer {
        + setUrl(url : string) : void
        + getUrl() : string
    }
    abstract FROSTQuery {
        + send() : QueryResult
        + setTop(n : int) : void           
        + setSkip(n : int) : void
        + setCount(set : bool) : void
        + setOrderBy(orderBy : string) : void
        + setSelect(select : string) : void
        + setFilter(filter : string) : void
        + setExpand(expand : string) : void
        + setID(id : string) : void
    }
    class ObservationQuery extends FROSTQuery
    class DatastreamQuery extends FROSTQuery
    class ObservedPropertyQuery extends FROSTQuery
    class ThingQuery extends FROSTQuery 
    class LocationQuery


    abstract QueryResult    

    class ObservationResult extends QueryResult
    class DatastreamResult extends QueryResult
    class ObservedPropertyResult extends QueryResult
    class ThingResult extends QueryResult
} 


package Model {
    class ObservationStation {
        -name : String
        -position : Position
        -availableFeatures : List<Feature>
        + getName() : string
        + getFeatures() : List<Feature>
        + getCurrentValue() : int
        + getPosition() : Position
        + getCurrentValue() : float
        + getAvarage() : float
        + getAllData(Date date, Date date) : List<float>
        + isLimitExceeded() : Boolean
    }
    
    ObservationStation -- Feature    
   
     class Date  {
        day : Integer
        month : Integer
        year : Integer
        hour : float
    }

    enum Timespan {
            LAST_YEAR,
            LAST_3_MONTHS,
            LAST_MONTH,
            LAST_WEEK,
            LAST_3_DAYS,
            TODAY,
        }
    
    ObservationStation --* Position
    
    class Position {
        xCoordinate : float
        yCoordinate : float
    }

    abstract class Feature {
        + getFeatureInfo() : FeatureInfo
    }
    class PM10 extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
    class PM2_5 extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
    class Humidity extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
    class AirPressure extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
    class Temperature extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
   
    enum Colors {
        GREEN
        LIGHTGREEN
        YELLOW
        ORANGE
        RED
    }

    Colors *-- ColorCode
    Colors *-- Scale
    ColorCode -- Scale

    class ColorCode {
        color : Colors
        + getColor(value : float)
    }

    class Scale {
        -colors : Colors[]
        +listAllColors() : Colors
    }
    
    class FeatureInfo {
        -info : String
        + getInfo() : String
    }
    
    Feature *-- FeatureInfo
}

MapPage +-- Model

package MapPage {

    package Components {
        class MapView extends React.Component {
            + stations : ArrayList<Messstation>
            + loading : boolean
            + selectedFeature : Feature
            --
            + selectStation(station : Messstation)
            + getValueAt(position: Position, feature : Feature) : float
        }

        class FeatureSelect extends React.Component {
            + getSelectedFeature() : Feature
            + setFeature(feature : Feature)
        }

        class Search extends React.Component {
            + searchTerm : string
            --
            + find(string searchTerm) : Position
            + findCurrentPosition() : Position
            + reset() : void
        }

        class Map extends React.Component {
            + pins : MapPin[]
            --
            + setPosition(position : Position)
            + setZoom(zoom : int)
            + openPopUp(station : Messstation)
        }

        class Legend extends React.Component{
            + setScale(scale : Skala)
            + loadScale(feature : Feature)
        }

        StationInfo --> MaterialUI.Button

        class StationInfo extends React.Component {
            + station : Messstation
        }
    }

    Map --> Viewport
    Map --> Position
    Map --> StationInfo
    MapView --> Search
    MapView --> Map
    FeatureSelect --> Legend
    MapView --> FeatureSelect

    

    class Viewport {
        + getCenter() : Position
        + setCenter(position : Position)

        + getZoom() : int
        + setZoom(zoom : int)
    }

    class Position {
        + getCoordinates() : (lng : float, lat : float)
        + setCoordinates(lng : float, lat : float)

        + toString() : string
    }
    

    Map -- "1" MapConfiguration
    MapConfiguration --> MapPin
    Map -- "*" MapPin
    Map -- "*" Polygon

    abstract MapConfiguration {
        + getPins(port : Viewport) : MapPin[]
        + getScale() : Skala
    }

    class testMapConfig extends MapConfiguration {
        
    }

    class MapPin {
        + getPosition() : Position
        + setPosition(position : Position)

        + getValue() : float
        + setValue(value : float)

        + getStationId() : string
        + setStationId(id : string)

        + getColor() : Color
        + setColor(color : Color)
    }

    class Polygon {
        + stations : ArrayList<Messstation>
        --
        + getAvgValue() : float
    }
}

package DetailPage {
    abstract DetailPageComponant extends MaterialUI.Paper

    class ObservationOverview extends DetailPageComponant
    class ObservationStationInfo extends DetailPageComponant
    class StaticMap extends DetailPageComponant
    abstract Diagram extends DetailPageComponant

    class Graph extends Diagram
    class PieChart extends Diagram

    class FeatureHistoryDiagram extends Graph
    class YearComparisonDiagram extends Graph
    class ComparisonToLastYearDiagram extends PieChart

    class DiagramConfiguration {
        + setTimespan(timespan : Timespan) : void
    }
}

Layout +-- MapPage

package Layout {
    abstract Page
    class ErrorPage extends Page
    class PrivacyPolicyPage extends Page
    class AboutPage extends Page
    class MapView extends Page
    class DetailPage extends Page

    class PageMenu
    class Ladeanzeige

    class LanguageMenu extends React.Component {
        + setLanguage(id : string)
    }
    LanguageMenu --> Storage.Language

    class TopBar
}

package Storage {
    class Language {
        + getString(id: string) : string
        + loadLanguage(file : string)
    }

    class MapConfigurationMemory {
        + save(MapConfiguration conf, viewport : Viewport)
        + load() : (MapConfiguration, Viewport)
    }
}


package MaterialUI {
    class PopUp
    class Button
}


@enduml
