@startuml Komplett


package FROST {
    
    FROSTQuery --> FROSTServer
    FROSTQuery --> QueryResult


    class FROSTServer
    abstract FROSTQuery {
        send() : QueryResult
    }
    class ObservationQuery extends FROSTQuery
    class DatastreamQuery extends FROSTQuery
    class ObservedPropertyQuery extends FROSTQuery
    class ThingQuery extends FROSTQuery

    abstract QueryResult
    

    class ObservationResult extends QueryResult
    class DatastreamResult extends QueryResult
    class ObservedPropertyResult extends QueryResult
    class ThingResult extends QueryResult
} 


package Modell {
    class Messstation {
    + getName() : string
    + getFeatures() : List<Feature>
    + getValue() : int
    + getPosition() : Position
    }

    abstract Feature {
    + getId() : String/int
    + getValue() : float
    + getFeatureInfo() : String
    }

    class Feinstaub extends Feature
    class Luftfeuchtigkeit extends Feature
    class Luftdruck extends Feature
    class Temperatur extends Feature

    class Färbung {
        + getColor(value : float) : Color
    }
    class Skala
    class Feature-Info
}

MapPage +-- Modell

package MapPage {

    package Components {
        class MapView extends React.Component {
            + stations : ArrayList<Messstation>
            + loading : boolean
            + selectedFeature : Feature
            --
            + selectStation(station : Messstation)
            + getValueAt(position: Position, feature : Feature) : float
        }

        class FeatureSelect extends React.Component {
            + getSelectedFeature() : Feature
            + setFeature(feature : Feature)
        }

        class Search extends React.Component {
            + searchTerm : string
            --
            + find(string searchTerm) : Position
            + findCurrentPosition() : Position
            + reset() : void
        }

        class Map extends React.Component {
        + pins : MapPin[]
        --
        + setPosition(position : Position)
        + setZoom(zoom : int)
        + openPopUp(station : Messstation)
        }

        class Legend extends React.Component{
            + setScale(scale : Skala)
            + loadScale(feature : Feature)
        }

        StationInfo --> UserInterface.Button

        class StationInfo extends React.Component {
            + station : Messstation
        }
    }

    Map --> Viewport
    Map --> Position
    Map --> StationInfo
    MapView --> Search
    MapView --> Map
    FeatureSelect --> Legend
    MapView --> FeatureSelect

    

    class Viewport {
        + getCenter() : Position
        + setCenter(position : Position)

        + getZoom() : int
        + setZoom(zoom : int)
    }

    class Position {
        + getCoordinates() : (lng : float, lat : float)
        + setCoordinates(lng : float, lat : float)

        + toString() : string
    }
    

    Map -- "1" MapConfiguration
    MapConfiguration --> MapPin
    Map -- "*" MapPin
    Map -- "*" Polygon

    abstract MapConfiguration {
        + getPins(port : Viewport) : MapPin[]
        + getScale() : Skala
    }

    class testMapConfig extends MapConfiguration {
        
    }

    class MapPin {
        + getPosition() : Position
        + setPosition(position : Position)

        + getValue() : float
        + setValue(value : float)

        + getStationId() : string
        + setStationId(id : string)

        + getColor() : Color
        + setColor(color : Color)
    }

    class Polygon {
        + stations : ArrayList<Messstation>
        --
        + getAvgValue() : float
    }
}

package Detailansicht {
    abstract Diagram
    class Graph extends Diagram
    class PieChart extends Diagram
    class HistorischeVeränderung extends Graph
    class Jahresvergleich extends Graph
    class HeutevsLetztesJahr extends PieChart
    class StaticMap
    class DiagramConfiguration
    class Messwertübersicht
    class Grenzwertwarnung extends PopUp
}

Layout +-- MapPage

package Layout {
    abstract Seite
    class Fehlerseite extends Seite
    class Datenschutzerklärung extends Seite
    class Impressum extends Seite
    class Ladeanzeige extends Seite
    class MapView extends Seite
    class Detailansicht extends Seite
    class Positionsanzeige
    class Seitenmenü

    Sprachauswahl --> Storage.Sprache
    class Sprachauswahl extends React.Component {
        + setLanguage(id : string)
    }
    class Kopfleiste
}

package Storage {
    class Sprache {
        + getString(id: string) : string
        + loadLanguage(file : string)
    }

    class MapConfigurationSpeicher {
        + save(MapConfiguration conf, viewport : Viewport)
        + load() : (MapConfiguration, Viewport)
    }
}


package UserInterface {
    class PopUp extends React.Component {
    + open() :void
    + close() :void
    }
    abstract Button
    class HamburgerMenu
    class Indexbutton    
    class InfoPopup extends PopUp {
        
    }
    class Infotext
    class Skala {
        färbung : Färbung
    }
    
}


@enduml