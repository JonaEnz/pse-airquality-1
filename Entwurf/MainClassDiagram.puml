@startuml Komplett


package FROST {
    
    FROSTQuery --> FROSTServer
    FROSTQuery --> QueryResult


    class FROSTServer {
        + setUrl(url : string) : void
        + getUrl() : string
    }
    abstract FROSTQuery {
        + send() : QueryResult
        + setTop(n : int) : void           
        + setSkip(n : int) : void
        + setCount(set : bool) : void
        + setOrderBy(orderBy : string) : void
        + setSelect(select : string) : void
        + setFilter(filter : string) : void
        + setExpand(expand : string) : void
        + setID(id : string) : void
    }
    class ObservationQuery extends FROSTQuery
    class DatastreamQuery extends FROSTQuery
    class ObservedPropertyQuery extends FROSTQuery
    class ThingQuery extends FROSTQuery 
    class LocationQuery


    abstract QueryResult    

    class ObservationResult extends QueryResult
    class DatastreamResult extends QueryResult
    class ObservedPropertyResult extends QueryResult
    class ThingResult extends QueryResult

    note top of DataProvider : This is a facade class. All requests for data run through this class.\nThe underlying mechanism of the request is hidden. \nOnly model data is given to the outside.
    class DataProvider {
        + getLatestObservations(center : Position, radius: int, feature : Feature) : Observation[]
        + getStationsIn(middle: Position, radius : int) : Station[]
        + getHistoricalObservations(station : Station, start : Date, end : Date, feature : Feature) : Observation[]
        + getHistoricalObservations(station : Station, start : Date, end : Date, frequency : Frequency, feature : Feature) : Observation[]
        + getScale(feature : Feature) : Scale
        + getStation(id : string) : Station
    }
} 


package Model {
    class ObservationStation {
        -name : String
        -position : Position
        -availableFeatures : List<Feature>
        --
        + getName() : string
        + getFeatures() : List<Feature>
        + getPosition() : Position
        + getAverage() : float
        + getAllData(Date date, Date date) : List<float>
        + isLimitExceeded() : Boolean
        + hasFeature(feature : Feature) : boolean
    }
    
    ObservationStation -- Feature    
   
    class Observation {
        observationStation : ObservationStation
        feature : Feature
        dateTime : DateTime
        value : float

        + getValue() : float
    }
    
     class DateTime  {
        day : Integer
        month : Integer
        year : Integer
        hour : float
        minute : float
        second : float
        milisecond : float
    }

    enum Timespan {
            LAST_YEAR,
            LAST_3_MONTHS,
            LAST_MONTH,
            LAST_WEEK,
            LAST_3_DAYS,
            TODAY,
        }
    
    ObservationStation --* Position
    
    class Position {
        xCoordinate : float
        yCoordinate : float
    }

    abstract class Feature {
        + getFeatureInfo() : FeatureInfo
    }
    class PM10 extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
    class PM2_5 extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
    class Humidity extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
    class AirPressure extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
    class Temperature extends Feature {
        -name : String
        -stations : Measurestations
        +getFeatureInfo() : FeatureInfo
    }
   
    enum Colors {
        GREEN = "#50EE70"
        LIGHTGREEN = "#AAFF55"
        YELLOW = "#FFFF00"
        ORANGE = "#FFA500"
        RED = "#FF0000" 
    }

    Colors *-- ColorCode
    Colors *-- Scale
    ColorCode -- Scale

    class Color {
        + getRGB() : string
        + setRGB(hex : string) : void
    }

    class ColorCode {
        color : Colors
        + getColor(value : float)
    }

    class Scale {
        -colors : Colors[]
        +listAllColors() : Colors
        + getColor(value : float) : Color
    }
    
    class FeatureInfo {
        -info : String
        + getInfo() : String
    }
    
    Feature *-- FeatureInfo
}

MapPage +-- Model

package MapPage {

    package Components {
        class MapView extends React.Component {
            + loading : boolean
            + selectedFeature : Feature
            --
            + selectStation(station : Messstation)
            + getValueAt(position: Position, feature : Feature) : float
            + openPopUp(station : ObservationStation)
            + closePopUp() : void
        }

        class FeatureSelect extends React.Component {
            + getSelectedFeature() : Feature
            + setFeature(feature : Feature)
        }

        class Search extends React.Component {
            + searchTerm : string
            --
            + find() : Position
            + findCurrentPosition() : Position
            + reset() : void
        }

        class Map extends React.Component {
            + viewport : Viewport
            --
            + setPosition(position : Position)
            + setZoom(zoom : int)
        }

        class Legend extends React.Component{
            + scale : Skala
        }

        class StationInfo extends React.Component {
            + openDetails : MaterialUI.Button
            + station : Messstation
            + isOpen : boolean
        }
    }

    Map --> Viewport
    MapView --> StationInfo
    Map --> MapPin
    Map --> Polygon
    MapView --> Search
    MapView --> Map
    MapView --> Legend
    MapView --> FeatureSelect

    

    class Viewport {
        + getCenter() : Position
        + setCenter(position : Position) : void

        + getZoom() : int
        + setZoom(zoom : int) : void

        + getRadius() : int
    }

    class Position {
        + getCoordinates() : (lng : float, lat : float)
        + setCoordinates(lng : float, lat : float)

        + toString() : string
    }
    

    MapView -- "1" MapConfiguration
    MapConfiguration --> MapPin
    MapConfiguration --> Polygon

    abstract MapConfiguration {
        + getPins(port : Viewport) : MapPin[]
        + getPolygons(port: Viewport) : Polygon[]
        + getScale() : Skala
        + getFeatures() : Feature[]
    }

    class StationConfiguration extends MapConfiguration {
        + setFeature(feature : Feature)
    }

    class PolygonConfiguration extends MapConfiguration {
        + setFeature(feature : Feature)
    }

    class NearConfiguration extends MapConfiguration {
        + radius : int
        --
        + setFeature(feature : Feature)
    }

    class MapPin {
        + getPosition() : Position
        + setPosition(position : Position) : void

        + getValue() : float
        + setValue(value : float) : void

        + getStationId() : string
        + setStationId(id : string) : void

        + getColor() : Color
        + setColor(color : Color) : void
    }

    class Polygon {
        + stations : ObservationStation[]
    }
}

package DetailPage {
    note top of DetailPage : This class manages the page build process. Based on which features the respective observation \nstation provides, the page is built differently. There is a configuration file which says which \ndiagrams must be drawn for which features. Accordingly the page is built.
    class DetailPage extends React.Component
    DetailPage "1" --> "1" Model.ObservationStation
    DetailPage "1" --o "1" ObservationStationInfo
    DetailPage "1" --o "1" LocationMap
    DetailPage "1" --o "*" Diagram
    DetailPage "1" --o "1" MaterialUI.Button

    class ObservationStationInfo extends React.Component
    ObservationStationInfo "1" --> "1" Model.ObservationStation
    ObservationStationInfo "1" --> "*" Model.Observation

    class LocationMap extends React.Component
    LocationMap "1" --> "1" Model.Position

    abstract Diagram extends React.Component
    Diagram "1" --> "*" Model.Observation
    Diagram "1" --o "1" ReactGoogleCharts.Chart
    Diagram "1" --o "1" MaterialUI.Progress

    class FeatureHistoryLineChart extends Diagram
    FeatureHistoryLineChart "1" --> "1" MaterialUI.Select

    class YearComparisonLineChart extends Diagram
    class ComparisonToLastYearPieChart extends Diagram
}

package ReactGoogleCharts {
    class Chart extends React.Component
}

Layout +-- MapPage
MapPage +-- MaterialUI

package Layout {
    abstract Page
    class ErrorPage extends Page {
        + errorCode : int
        + errorMessage : string
    }
    class PrivacyPolicyPage extends Page
    class AboutPage extends Page
    class DetailPage extends Page 

    class PageMenu
    class Ladeanzeige

    class LanguageMenu extends React.Component {
        + setLanguage(id : string)
    }
    LanguageMenu --> Storage.Language

    class TopBar
}

package Storage {
    class Language {
        + getString(id: string) : string
        + loadLanguage(file : string)
    }

    class MapConfigurationMemory {
        + save(MapConfiguration conf, viewport : Viewport)
        + load() : (MapConfiguration, Viewport)
    }
}


package MaterialUI {
    class PopUp extends React.Component
    class Button extends React.Component
    class Select extends React.Component
    class Progress extends React.Component
}


@enduml
